let fname = document.querySelector("#fname");

let lname = document.querySelector("#lname");

let email = document.querySelector("#email");

let mobile = document.querySelector("#mobile");

let address = document.querySelector("#address");

let pin = document.querySelector("#pin");

let form = document.querySelector("#signup-form");

// onBlur we have to check -> if invalid data highlight as invalid and if data changes from invalid to valid or onchange remove message from error element

const validateFname = () => {
  if (fname.value.trim() === "") {
    showError(fname, "First Name shouldn't be empty");
    return;
  }
  removeErrorMessage(fname);
};

// oninput we checking error -> if the invalid present on initial onblur event then we check the error still persist onchange and if the error doesn't there then we remove error already set by onBlur.

const validateonChangeFname = () => {
  if (fname.value.trim() === "") {
    showError(fname, "First Name shouldn't be empty");
    return;
  }

  validateFname();

  if (+fname.value.trim().split("").length > 64) {
    showError(fname, "First Name character's length should less than 64");
    return;
  }

  return true;
};

// Last Name Validation
const validateLname = () => {
  if (lname.value.trim() === "") {
    showError(lname, "Last Name shouldn't be empty");
    return;
  }
  removeErrorMessage(lname);
};

const validateonChangeLname = () => {
  if (lname.value.trim() === "") {
    showError(lname, "Last Name shouldn't be empty");
    return;
  }

  validateLname();
};

// Email Validation
const validateEmail = () => {
  if (email.value.trim() === "") {
    showError(email, "Email Field doesn't be empty");
    return;
  }

  if (!email.value.trim().includes("#")) {
    showError(email, "Email Field should include #");
    return;
  }

  const emailValidate = isEmailValid(email.value.trim());
  if (emailValidate == 0) {
    showError(email, "Please enter a valid email address");
    return;
  }

  removeErrorMessage(email);
};

const validateonChangeEmail = () => {
  if (email.value.trim() === "") {
    showError(email, "Email Field doesn't be empty");
    return;
  }

  if (!email.value.trim().includes("#")) {
    showError(email, "Email Field should include #");
    return;
  }

  const emailValidate = isEmailValid(email.value.trim());
  if (emailValidate == 0) {
    showError(email, "Please enter a valid email address");
    return;
  }

  validateEmail();
};

// Mobile Validation
const validateMobile = () => {
  if (+mobile.value.trim().split("").length < 10) {
    showError(mobile, "Mobile number should be length of 10");
    return;
  }
  removeErrorMessage(mobile);
};

const validateonChangeMobile = () => {
  if (+mobile.value.trim().split("").length < 10) {
    showError(mobile, "Mobile number should be length of 10");
    return;
  }

  if (+mobile.value.trim().split("").length > 9) {
    mobile.disabled = true;
  }
  validateMobile();
};

const validateAddress = () => {
  if (address.value.trim() === "") {
    showError(address, "Address Should not be empty");
    return;
  }
  removeErrorMessage(address);
};

const validateonChangeAddress = () => {
  if (address.value.trim() === "") {
    showError(address, "Address Should not be empty");
    return;
  }
  validateAddress();
};

const validatePin = () => {
  if (pin.value.trim() === "") {
    showError(pin, "Address Should not be empty");
    return;
  }

  if (+pin.value.trim().split("").length < 5) {
    showError(pin, "Pin Should length of 5");
    return;
  }

  removeErrorMessage(pin);
};

const validateonChangePin = () => {
  if (pin.value.trim() === "") {
    showError(pin, "Pin Should not be empty");
    return;
  }

  if (+pin.value.trim().split("").length < 6) {
    showError(pin, "Pin Should length of 6");
    return;
  }

  if (+pin.value.trim().split("").length === 6) {
    pin.disabled = true;
  }

  validatePin();
};

form.addEventListener("submit", function (e) {
  e.preventDefault();
});

const showError = (input, message) => {
  const inputData = input.parentElement;

  inputData.classList.add("error");

  const error = inputData.querySelector("small");

  error.textContent = message;
};

const removeErrorMessage = (input) => {
  const inputData = input.parentElement;

  inputData.classList.remove("error");

  const error = inputData.querySelector("small");

  error.textContent = null;
};

const isEmailValid = (email) => {
  const re =
    /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))#((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{5,}))$/;
  return re.test(email);
};

// Draft HTML //

<form id="signup-form" name="RegForm">
  <div class="input-data">
    <label for="fname">First Name</label>
    <input
      type="text"
      id="fname"
      name="fname"
      max="64"
      oninput="validateonChangeFname()"
      onblur="validateFname()"
    />
    <small></small>
  </div>
  <div class="input-data">
    <label for="lname">Last Name</label>
    <input
      type="text"
      id="lname"
      name="lname"
      max="64"
      oninput="validateonChangeLname()"
      onblur="validateLname()"
    />
    <small></small>
  </div>
  <div class="input-data">
    <label for="email">Email</label>
    <input
      type="text"
      id="email"
      name="email"
      oninput="validateonChangeEmail()"
      onblur="validateEmail()"
    />
    <small></small>
  </div>
  <div class="input-data">
    <label for="mobile">Mobile</label>
    <input
      type="text"
      id="mobile"
      name="mobile"
      oninput="validateonChangeMobile()"
      onblur="validateMobile()"
    />
    <small></small>
  </div>
  <div class="input-data">
    <label for="address">Address</label>
    <textarea
      id="address"
      rows="4"
      cols="20"
      oninput="validateonChangeAddress()"
      onblur="validateAddress()"
    ></textarea>
    <small></small>
  </div>
  <div class="input-data">
    <label for="pin">Pin Code</label>
    <input
      type="text"
      name="pin"
      id="pin"
      oninput="validateonChangePin()"
      onblur="validatePin()"
      onblur="validatePin()"
    />
    <small></small>
  </div>
  <button type="submit" class="btn">
    Sign Up
  </button>
</form>;
